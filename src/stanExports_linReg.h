// Generated by rstantools.  Do not edit by hand.

/*
    new is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    new is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with new.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_linReg_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_linReg");
    reader.add_event(131, 129, "end", "model_linReg");
    return reader;
}
#include <stan_meta_header.hpp>
class model_linReg
  : public stan::model::model_base_crtp<model_linReg> {
private:
        int N;
        int K;
        int K1;
        int xunc;
        int betaConstr;
        int logitR;
        int ar1;
        double varY;
        vector_d y;
        std::vector<int> yL;
        vector_d yUncertainty;
        matrix_d xUncertaintyMatrix;
        matrix_d X;
public:
    model_linReg(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_linReg(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_linReg_namespace::model_linReg";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K1", "int", context__.to_vec());
            K1 = int(0);
            vals_i__ = context__.vals_i("K1");
            pos__ = 0;
            K1 = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "xunc", "int", context__.to_vec());
            xunc = int(0);
            vals_i__ = context__.vals_i("xunc");
            pos__ = 0;
            xunc = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "betaConstr", "int", context__.to_vec());
            betaConstr = int(0);
            vals_i__ = context__.vals_i("betaConstr");
            pos__ = 0;
            betaConstr = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "logitR", "int", context__.to_vec());
            logitR = int(0);
            vals_i__ = context__.vals_i("logitR");
            pos__ = 0;
            logitR = vals_i__[pos__++];
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "ar1", "int", context__.to_vec());
            ar1 = int(0);
            vals_i__ = context__.vals_i("ar1");
            pos__ = 0;
            ar1 = vals_i__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "varY", "double", context__.to_vec());
            varY = double(0);
            vals_r__ = context__.vals_r("varY");
            pos__ = 0;
            varY = vals_r__[pos__++];
            check_greater_or_equal(function__, "varY", varY, 0);
            current_statement_begin__ = 10;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("yL", "N", N);
            context__.validate_dims("data initialization", "yL", "int", context__.to_vec(N));
            yL = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("yL");
            pos__ = 0;
            size_t yL_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < yL_k_0_max__; ++k_0__) {
                yL[k_0__] = vals_i__[pos__++];
            }
            size_t yL_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < yL_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "yL[i_0__]", yL[i_0__], 0);
                check_less_or_equal(function__, "yL[i_0__]", yL[i_0__], 1);
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("yUncertainty", "N", N);
            context__.validate_dims("data initialization", "yUncertainty", "vector_d", context__.to_vec(N));
            yUncertainty = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("yUncertainty");
            pos__ = 0;
            size_t yUncertainty_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < yUncertainty_j_1_max__; ++j_1__) {
                yUncertainty(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "yUncertainty", yUncertainty, 0);
            current_statement_begin__ = 13;
            validate_non_negative_index("xUncertaintyMatrix", "N", N);
            validate_non_negative_index("xUncertaintyMatrix", "K", K);
            context__.validate_dims("data initialization", "xUncertaintyMatrix", "matrix_d", context__.to_vec(N,K));
            xUncertaintyMatrix = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("xUncertaintyMatrix");
            pos__ = 0;
            size_t xUncertaintyMatrix_j_2_max__ = K;
            size_t xUncertaintyMatrix_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < xUncertaintyMatrix_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xUncertaintyMatrix_j_1_max__; ++j_1__) {
                    xUncertaintyMatrix(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "xUncertaintyMatrix", xUncertaintyMatrix, 0);
            current_statement_begin__ = 14;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 17;
            validate_non_negative_index("beta0", "K1", K1);
            num_params_r__ += K1;
            current_statement_begin__ = 18;
            validate_non_negative_index("betaraw", "(K - K1)", (K - K1));
            num_params_r__ += ((K - K1) - 1);
            current_statement_begin__ = 19;
            validate_non_negative_index("betarawS", "(K - K1)", (K - K1));
            num_params_r__ += (K - K1);
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            validate_non_negative_index("log_sigma_x", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 22;
            validate_non_negative_index("XTRUE", "N", N);
            validate_non_negative_index("XTRUE", "K", K);
            num_params_r__ += (N * K);
            current_statement_begin__ = 23;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_linReg() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 17;
        if (!(context__.contains_r("beta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta0");
        pos__ = 0U;
        validate_non_negative_index("beta0", "K1", K1);
        context__.validate_dims("parameter initialization", "beta0", "vector_d", context__.to_vec(K1));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta0(K1);
        size_t beta0_j_1_max__ = K1;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            beta0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("betaraw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable betaraw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("betaraw");
        pos__ = 0U;
        validate_non_negative_index("betaraw", "(K - K1)", (K - K1));
        context__.validate_dims("parameter initialization", "betaraw", "vector_d", context__.to_vec((K - K1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> betaraw((K - K1));
        size_t betaraw_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < betaraw_j_1_max__; ++j_1__) {
            betaraw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(betaraw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable betaraw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("betarawS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable betarawS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("betarawS");
        pos__ = 0U;
        validate_non_negative_index("betarawS", "(K - K1)", (K - K1));
        context__.validate_dims("parameter initialization", "betarawS", "vector_d", context__.to_vec((K - K1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> betarawS((K - K1));
        size_t betarawS_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < betarawS_j_1_max__; ++j_1__) {
            betarawS(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(betarawS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable betarawS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("logsigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logsigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logsigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "logsigma", "double", context__.to_vec());
        double logsigma(0);
        logsigma = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(logsigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logsigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("log_sigma_x")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_sigma_x missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_sigma_x");
        pos__ = 0U;
        validate_non_negative_index("log_sigma_x", "K", K);
        context__.validate_dims("parameter initialization", "log_sigma_x", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> log_sigma_x(K);
        size_t log_sigma_x_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < log_sigma_x_j_1_max__; ++j_1__) {
            log_sigma_x(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(log_sigma_x);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_sigma_x: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("XTRUE")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable XTRUE missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("XTRUE");
        pos__ = 0U;
        validate_non_negative_index("XTRUE", "N", N);
        validate_non_negative_index("XTRUE", "K", K);
        context__.validate_dims("parameter initialization", "XTRUE", "matrix_d", context__.to_vec(N,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> XTRUE(N, K);
        size_t XTRUE_j_2_max__ = K;
        size_t XTRUE_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < XTRUE_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < XTRUE_j_1_max__; ++j_1__) {
                XTRUE(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(XTRUE);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable XTRUE: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("ar")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ar missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ar");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ar", "double", context__.to_vec());
        double ar(0);
        ar = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, ar);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ar: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 17;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta0;
            (void) beta0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta0 = in__.vector_constrain(K1, lp__);
            else
                beta0 = in__.vector_constrain(K1);
            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betaraw;
            (void) betaraw;  // dummy to suppress unused var warning
            if (jacobian__)
                betaraw = in__.simplex_constrain((K - K1), lp__);
            else
                betaraw = in__.simplex_constrain((K - K1));
            current_statement_begin__ = 19;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betarawS;
            (void) betarawS;  // dummy to suppress unused var warning
            if (jacobian__)
                betarawS = in__.vector_constrain((K - K1), lp__);
            else
                betarawS = in__.vector_constrain((K - K1));
            current_statement_begin__ = 20;
            local_scalar_t__ logsigma;
            (void) logsigma;  // dummy to suppress unused var warning
            if (jacobian__)
                logsigma = in__.scalar_constrain(lp__);
            else
                logsigma = in__.scalar_constrain();
            current_statement_begin__ = 21;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_sigma_x;
            (void) log_sigma_x;  // dummy to suppress unused var warning
            if (jacobian__)
                log_sigma_x = in__.vector_constrain(K, lp__);
            else
                log_sigma_x = in__.vector_constrain(K);
            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> XTRUE;
            (void) XTRUE;  // dummy to suppress unused var warning
            if (jacobian__)
                XTRUE = in__.matrix_constrain(N, K, lp__);
            else
                XTRUE = in__.matrix_constrain(N, K);
            current_statement_begin__ = 23;
            local_scalar_t__ ar;
            (void) ar;  // dummy to suppress unused var warning
            if (jacobian__)
                ar = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                ar = in__.scalar_lub_constrain(-(1), 1);
            // transformed parameters
            current_statement_begin__ = 26;
            validate_non_negative_index("sigma", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma(N);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("sigma_x", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_x(K);
            stan::math::initialize(sigma_x, DUMMY_VAR__);
            stan::math::fill(sigma_x, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("beta", "(K - K1)", (K - K1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta((K - K1));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("betaAll", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betaAll(K);
            stan::math::initialize(betaAll, DUMMY_VAR__);
            stan::math::fill(betaAll, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("epsAR1", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> epsAR1(N);
            stan::math::initialize(epsAR1, DUMMY_VAR__);
            stan::math::fill(epsAR1, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("eps", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eps(N);
            stan::math::initialize(eps, DUMMY_VAR__);
            stan::math::fill(eps, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 33;
            if (as_bool(betaConstr)) {
                current_statement_begin__ = 34;
                stan::math::assign(beta, betaraw);
            } else {
                current_statement_begin__ = 36;
                stan::math::assign(beta, betarawS);
            }
            current_statement_begin__ = 38;
            stan::math::assign(sigma_x, stan::math::exp(log_sigma_x));
            current_statement_begin__ = 39;
            stan::math::assign(sigma, stan::math::sqrt(add(square((stan::math::exp(logsigma) * stan::math::sqrt(varY))), square(yUncertainty))));
            current_statement_begin__ = 40;
            stan::math::assign(betaAll, append_row(beta0, beta));
            current_statement_begin__ = 41;
            if (as_bool(logical_negation(logitR))) {
                current_statement_begin__ = 42;
                if (as_bool(ar1)) {
                    current_statement_begin__ = 43;
                    if (as_bool(xunc)) {
                        current_statement_begin__ = 44;
                        stan::model::assign(eps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (get_base1(y, 1, "y", 1) - multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll)), 
                                    "assigning variable eps");
                        current_statement_begin__ = 45;
                        stan::model::assign(epsAR1, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    get_base1(eps, 1, "eps", 1), 
                                    "assigning variable epsAR1");
                        current_statement_begin__ = 46;
                        for (int i = 2; i <= N; ++i) {
                            current_statement_begin__ = 47;
                            stan::model::assign(eps, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(y, i, "y", 1) - multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll)) - (get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar)), 
                                        "assigning variable eps");
                            current_statement_begin__ = 48;
                            stan::model::assign(epsAR1, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar) + get_base1(eps, i, "eps", 1)), 
                                        "assigning variable epsAR1");
                        }
                    } else {
                        current_statement_begin__ = 51;
                        stan::model::assign(eps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (get_base1(y, 1, "y", 1) - multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll)), 
                                    "assigning variable eps");
                        current_statement_begin__ = 52;
                        stan::model::assign(epsAR1, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    get_base1(eps, 1, "eps", 1), 
                                    "assigning variable epsAR1");
                        current_statement_begin__ = 53;
                        for (int i = 2; i <= N; ++i) {
                            current_statement_begin__ = 54;
                            stan::model::assign(eps, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(y, i, "y", 1) - multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll)) - (get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar)), 
                                        "assigning variable eps");
                            current_statement_begin__ = 55;
                            stan::model::assign(epsAR1, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar) + get_base1(eps, i, "eps", 1)), 
                                        "assigning variable epsAR1");
                        }
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 26;
            size_t sigma_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 27;
            size_t sigma_x_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < sigma_x_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_x(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_x" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 28;
            size_t beta_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 29;
            size_t betaAll_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < betaAll_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(betaAll(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: betaAll" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable betaAll: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 30;
            size_t epsAR1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < epsAR1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(epsAR1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: epsAR1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable epsAR1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 31;
            size_t eps_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eps_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eps(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eps" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eps: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 62;
            lp_accum__.add(student_t_log<propto__>(logsigma, 3, -(2), 2));
            current_statement_begin__ = 63;
            if (as_bool(logical_gt(K1, 0))) {
                current_statement_begin__ = 64;
                lp_accum__.add(student_t_log<propto__>(beta0, 1, 0, 10));
            }
            current_statement_begin__ = 66;
            lp_accum__.add(student_t_log<propto__>(beta, 3, 0, 5));
            current_statement_begin__ = 67;
            if (as_bool(xunc)) {
                current_statement_begin__ = 68;
                lp_accum__.add(normal_log<propto__>(log_sigma_x, 0, 1));
                current_statement_begin__ = 69;
                for (int i = 1; i <= K; ++i) {
                    current_statement_begin__ = 70;
                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "XTRUE"), 0, get_base1(sigma_x, i, "sigma_x", 1)));
                    current_statement_begin__ = 71;
                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X"), stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "XTRUE"), add(stan::model::rvalue(xUncertaintyMatrix, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "xUncertaintyMatrix"), 1E-4)));
                }
                current_statement_begin__ = 73;
                if (as_bool(logitR)) {
                    current_statement_begin__ = 74;
                    lp_accum__.add(bernoulli_logit_log<propto__>(yL, multiply(XTRUE, betaAll)));
                } else {
                    current_statement_begin__ = 76;
                    if (as_bool(ar1)) {
                        current_statement_begin__ = 77;
                        lp_accum__.add(normal_log<propto__>(get_base1(y, 1, "y", 1), multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll), (get_base1(sigma, 1, "sigma", 1) / stan::math::sqrt((1 - pow(ar, 2))))));
                        current_statement_begin__ = 78;
                        for (int i = 2; i <= N; ++i) {
                            current_statement_begin__ = 79;
                            lp_accum__.add(normal_log<propto__>(get_base1(y, i, "y", 1), (multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll) + (get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar)), get_base1(sigma, i, "sigma", 1)));
                        }
                    } else {
                        current_statement_begin__ = 82;
                        lp_accum__.add(normal_log<propto__>(y, multiply(XTRUE, betaAll), sigma));
                    }
                }
            } else {
                current_statement_begin__ = 86;
                if (as_bool(logitR)) {
                    current_statement_begin__ = 87;
                    lp_accum__.add(bernoulli_logit_log<propto__>(yL, multiply(X, betaAll)));
                } else {
                    current_statement_begin__ = 89;
                    if (as_bool(ar1)) {
                        current_statement_begin__ = 90;
                        lp_accum__.add(normal_log<propto__>(get_base1(y, 1, "y", 1), multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll), (get_base1(sigma, 1, "sigma", 1) / stan::math::sqrt((1 - pow(ar, 2))))));
                        current_statement_begin__ = 91;
                        for (int i = 2; i <= N; ++i) {
                            current_statement_begin__ = 92;
                            lp_accum__.add(normal_log<propto__>(get_base1(y, i, "y", 1), (multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll) + (get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar)), get_base1(sigma, i, "sigma", 1)));
                        }
                    } else {
                        current_statement_begin__ = 95;
                        lp_accum__.add(normal_log<propto__>(y, multiply(X, betaAll), sigma));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta0");
        names__.push_back("betaraw");
        names__.push_back("betarawS");
        names__.push_back("logsigma");
        names__.push_back("log_sigma_x");
        names__.push_back("XTRUE");
        names__.push_back("ar");
        names__.push_back("sigma");
        names__.push_back("sigma_x");
        names__.push_back("beta");
        names__.push_back("betaAll");
        names__.push_back("epsAR1");
        names__.push_back("eps");
        names__.push_back("log_lik");
        names__.push_back("sigmasq");
        names__.push_back("rsq");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - K1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - K1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - K1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_linReg_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta0 = in__.vector_constrain(K1);
        size_t beta0_j_1_max__ = K1;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            vars__.push_back(beta0(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> betaraw = in__.simplex_constrain((K - K1));
        size_t betaraw_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < betaraw_j_1_max__; ++j_1__) {
            vars__.push_back(betaraw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> betarawS = in__.vector_constrain((K - K1));
        size_t betarawS_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < betarawS_j_1_max__; ++j_1__) {
            vars__.push_back(betarawS(j_1__));
        }
        double logsigma = in__.scalar_constrain();
        vars__.push_back(logsigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> log_sigma_x = in__.vector_constrain(K);
        size_t log_sigma_x_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < log_sigma_x_j_1_max__; ++j_1__) {
            vars__.push_back(log_sigma_x(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> XTRUE = in__.matrix_constrain(N, K);
        size_t XTRUE_j_2_max__ = K;
        size_t XTRUE_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < XTRUE_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < XTRUE_j_1_max__; ++j_1__) {
                vars__.push_back(XTRUE(j_1__, j_2__));
            }
        }
        double ar = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(ar);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 26;
            validate_non_negative_index("sigma", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(N);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("sigma_x", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_x(K);
            stan::math::initialize(sigma_x, DUMMY_VAR__);
            stan::math::fill(sigma_x, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("beta", "(K - K1)", (K - K1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta((K - K1));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("betaAll", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> betaAll(K);
            stan::math::initialize(betaAll, DUMMY_VAR__);
            stan::math::fill(betaAll, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("epsAR1", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> epsAR1(N);
            stan::math::initialize(epsAR1, DUMMY_VAR__);
            stan::math::fill(epsAR1, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("eps", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eps(N);
            stan::math::initialize(eps, DUMMY_VAR__);
            stan::math::fill(eps, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 33;
            if (as_bool(betaConstr)) {
                current_statement_begin__ = 34;
                stan::math::assign(beta, betaraw);
            } else {
                current_statement_begin__ = 36;
                stan::math::assign(beta, betarawS);
            }
            current_statement_begin__ = 38;
            stan::math::assign(sigma_x, stan::math::exp(log_sigma_x));
            current_statement_begin__ = 39;
            stan::math::assign(sigma, stan::math::sqrt(add(square((stan::math::exp(logsigma) * stan::math::sqrt(varY))), square(yUncertainty))));
            current_statement_begin__ = 40;
            stan::math::assign(betaAll, append_row(beta0, beta));
            current_statement_begin__ = 41;
            if (as_bool(logical_negation(logitR))) {
                current_statement_begin__ = 42;
                if (as_bool(ar1)) {
                    current_statement_begin__ = 43;
                    if (as_bool(xunc)) {
                        current_statement_begin__ = 44;
                        stan::model::assign(eps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (get_base1(y, 1, "y", 1) - multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll)), 
                                    "assigning variable eps");
                        current_statement_begin__ = 45;
                        stan::model::assign(epsAR1, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    get_base1(eps, 1, "eps", 1), 
                                    "assigning variable epsAR1");
                        current_statement_begin__ = 46;
                        for (int i = 2; i <= N; ++i) {
                            current_statement_begin__ = 47;
                            stan::model::assign(eps, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(y, i, "y", 1) - multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll)) - (get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar)), 
                                        "assigning variable eps");
                            current_statement_begin__ = 48;
                            stan::model::assign(epsAR1, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar) + get_base1(eps, i, "eps", 1)), 
                                        "assigning variable epsAR1");
                        }
                    } else {
                        current_statement_begin__ = 51;
                        stan::model::assign(eps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (get_base1(y, 1, "y", 1) - multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll)), 
                                    "assigning variable eps");
                        current_statement_begin__ = 52;
                        stan::model::assign(epsAR1, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    get_base1(eps, 1, "eps", 1), 
                                    "assigning variable epsAR1");
                        current_statement_begin__ = 53;
                        for (int i = 2; i <= N; ++i) {
                            current_statement_begin__ = 54;
                            stan::model::assign(eps, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(y, i, "y", 1) - multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll)) - (get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar)), 
                                        "assigning variable eps");
                            current_statement_begin__ = 55;
                            stan::model::assign(epsAR1, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(epsAR1, (i - 1), "epsAR1", 1) * ar) + get_base1(eps, i, "eps", 1)), 
                                        "assigning variable epsAR1");
                        }
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t sigma_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma(j_1__));
                }
                size_t sigma_x_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < sigma_x_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_x(j_1__));
                }
                size_t beta_j_1_max__ = (K - K1);
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t betaAll_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < betaAll_j_1_max__; ++j_1__) {
                    vars__.push_back(betaAll(j_1__));
                }
                size_t epsAR1_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < epsAR1_j_1_max__; ++j_1__) {
                    vars__.push_back(epsAR1(j_1__));
                }
                size_t eps_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < eps_j_1_max__; ++j_1__) {
                    vars__.push_back(eps(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 101;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 102;
            validate_non_negative_index("sigmasq", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigmasq(N);
            stan::math::initialize(sigmasq, DUMMY_VAR__);
            stan::math::fill(sigmasq, DUMMY_VAR__);
            current_statement_begin__ = 103;
            double rsq;
            (void) rsq;  // dummy to suppress unused var warning
            stan::math::initialize(rsq, DUMMY_VAR__);
            stan::math::fill(rsq, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 104;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 104;
                stan::model::assign(sigmasq, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            square(get_base1(sigma, n, "sigma", 1)), 
                            "assigning variable sigmasq");
            }
            current_statement_begin__ = 105;
            stan::math::assign(rsq, (1 - (mean(sigmasq) / varY)));
            current_statement_begin__ = 106;
            if (as_bool(xunc)) {
                current_statement_begin__ = 107;
                if (as_bool(logitR)) {
                    current_statement_begin__ = 108;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 108;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    (bernoulli_logit_log(get_base1(yL, n, "yL", 1), multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll)) + normal_log(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), add(stan::model::rvalue(xUncertaintyMatrix, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "xUncertaintyMatrix"), 1E-4))), 
                                    "assigning variable log_lik");
                    }
                } else {
                    current_statement_begin__ = 110;
                    if (as_bool(ar1)) {
                        current_statement_begin__ = 111;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (normal_log(get_base1(y, 1, "y", 1), multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll), (get_base1(sigma, 1, "sigma", 1) / stan::math::sqrt((1 - pow(ar, 2))))) + normal_log(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), add(stan::model::rvalue(xUncertaintyMatrix, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "xUncertaintyMatrix"), 1E-4))), 
                                    "assigning variable log_lik");
                        current_statement_begin__ = 112;
                        for (int n = 2; n <= N; ++n) {
                            current_statement_begin__ = 112;
                            stan::model::assign(log_lik, 
                                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                        (normal_log(get_base1(y, n, "y", 1), (multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll) + (get_base1(epsAR1, (n - 1), "epsAR1", 1) * ar)), get_base1(sigma, n, "sigma", 1)) + normal_log(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), add(stan::model::rvalue(xUncertaintyMatrix, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "xUncertaintyMatrix"), 1E-4))), 
                                        "assigning variable log_lik");
                        }
                    } else {
                        current_statement_begin__ = 114;
                        for (int n = 1; n <= N; ++n) {
                            current_statement_begin__ = 114;
                            stan::model::assign(log_lik, 
                                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                        (normal_log(get_base1(y, n, "y", 1), multiply(stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), betaAll), get_base1(sigma, n, "sigma", 1)) + normal_log(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), stan::model::rvalue(XTRUE, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "XTRUE"), add(stan::model::rvalue(xUncertaintyMatrix, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "xUncertaintyMatrix"), 1E-4))), 
                                        "assigning variable log_lik");
                        }
                    }
                }
            } else {
                current_statement_begin__ = 118;
                if (as_bool(logitR)) {
                    current_statement_begin__ = 119;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 119;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    bernoulli_logit_log(get_base1(yL, n, "yL", 1), multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll)), 
                                    "assigning variable log_lik");
                    }
                } else {
                    current_statement_begin__ = 121;
                    if (as_bool(ar1)) {
                        current_statement_begin__ = 122;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    normal_log(get_base1(y, 1, "y", 1), multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll), (get_base1(sigma, 1, "sigma", 1) / stan::math::sqrt((1 - pow(ar, 2))))), 
                                    "assigning variable log_lik");
                        current_statement_begin__ = 123;
                        for (int n = 2; n <= N; ++n) {
                            current_statement_begin__ = 123;
                            stan::model::assign(log_lik, 
                                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                        normal_log(get_base1(y, n, "y", 1), (multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll) + (get_base1(epsAR1, (n - 1), "epsAR1", 1) * ar)), get_base1(sigma, n, "sigma", 1)), 
                                        "assigning variable log_lik");
                        }
                    } else {
                        current_statement_begin__ = 125;
                        for (int n = 1; n <= N; ++n) {
                            current_statement_begin__ = 125;
                            stan::model::assign(log_lik, 
                                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                        normal_log(get_base1(y, n, "y", 1), multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betaAll), get_base1(sigma, n, "sigma", 1)), 
                                        "assigning variable log_lik");
                        }
                    }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 101;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 102;
            size_t sigmasq_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigmasq_j_1_max__; ++j_1__) {
                vars__.push_back(sigmasq(j_1__));
            }
            current_statement_begin__ = 103;
            vars__.push_back(rsq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_linReg";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta0_j_1_max__ = K1;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t betaraw_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < betaraw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaraw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t betarawS_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < betarawS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betarawS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "logsigma";
        param_names__.push_back(param_name_stream__.str());
        size_t log_sigma_x_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < log_sigma_x_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_sigma_x" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t XTRUE_j_2_max__ = K;
        size_t XTRUE_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < XTRUE_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < XTRUE_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "XTRUE" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "ar";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t sigma_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_x_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < sigma_x_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_x" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t betaAll_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < betaAll_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betaAll" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t epsAR1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < epsAR1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsAR1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eps_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eps_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eps" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmasq_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < sigmasq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmasq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rsq";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta0_j_1_max__ = K1;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t betaraw_j_1_max__ = ((K - K1) - 1);
        for (size_t j_1__ = 0; j_1__ < betaraw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaraw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t betarawS_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < betarawS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betarawS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "logsigma";
        param_names__.push_back(param_name_stream__.str());
        size_t log_sigma_x_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < log_sigma_x_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_sigma_x" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t XTRUE_j_2_max__ = K;
        size_t XTRUE_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < XTRUE_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < XTRUE_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "XTRUE" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "ar";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t sigma_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_x_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < sigma_x_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_x" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t betaAll_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < betaAll_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betaAll" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t epsAR1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < epsAR1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsAR1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eps_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eps_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eps" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmasq_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < sigmasq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmasq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rsq";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_linReg_namespace::model_linReg stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
