// Generated by rstantools.  Do not edit by hand.

/*
    new is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    new is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with new.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_linRegHorseShoe_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_linRegHorseShoe");
    reader.add_event(66, 64, "end", "model_linRegHorseShoe");
    return reader;
}
#include <stan_meta_header.hpp>
class model_linRegHorseShoe
  : public stan::model::model_base_crtp<model_linRegHorseShoe> {
private:
        int N;
        int K;
        int K2;
        int K1;
        int logitR;
        double varY;
        std::vector<double> y;
        std::vector<int> yL;
        vector_d yUncertainty;
        matrix_d X;
        matrix_d X2;
public:
    model_linRegHorseShoe(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_linRegHorseShoe(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_linRegHorseShoe_namespace::model_linRegHorseShoe";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K2", "int", context__.to_vec());
            K2 = int(0);
            vals_i__ = context__.vals_i("K2");
            pos__ = 0;
            K2 = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "K1", "int", context__.to_vec());
            K1 = int(0);
            vals_i__ = context__.vals_i("K1");
            pos__ = 0;
            K1 = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "logitR", "int", context__.to_vec());
            logitR = int(0);
            vals_i__ = context__.vals_i("logitR");
            pos__ = 0;
            logitR = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "varY", "double", context__.to_vec());
            varY = double(0);
            vals_r__ = context__.vals_r("varY");
            pos__ = 0;
            varY = vals_r__[pos__++];
            check_greater_or_equal(function__, "varY", varY, 0);
            current_statement_begin__ = 8;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
            y = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("yL", "N", N);
            context__.validate_dims("data initialization", "yL", "int", context__.to_vec(N));
            yL = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("yL");
            pos__ = 0;
            size_t yL_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < yL_k_0_max__; ++k_0__) {
                yL[k_0__] = vals_i__[pos__++];
            }
            size_t yL_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < yL_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "yL[i_0__]", yL[i_0__], 0);
                check_less_or_equal(function__, "yL[i_0__]", yL[i_0__], 1);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("yUncertainty", "N", N);
            context__.validate_dims("data initialization", "yUncertainty", "vector_d", context__.to_vec(N));
            yUncertainty = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("yUncertainty");
            pos__ = 0;
            size_t yUncertainty_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < yUncertainty_j_1_max__; ++j_1__) {
                yUncertainty(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("X2", "N", N);
            validate_non_negative_index("X2", "K2", K2);
            context__.validate_dims("data initialization", "X2", "matrix_d", context__.to_vec(N,K2));
            X2 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K2);
            vals_r__ = context__.vals_r("X2");
            pos__ = 0;
            size_t X2_j_2_max__ = K2;
            size_t X2_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X2_j_1_max__; ++j_1__) {
                    X2(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 15;
            validate_non_negative_index("beta0", "K1", K1);
            num_params_r__ += K1;
            current_statement_begin__ = 16;
            validate_non_negative_index("beta2", "K2", K2);
            num_params_r__ += K2;
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            validate_non_negative_index("zvalues", "(K - K1)", (K - K1));
            num_params_r__ += (K - K1);
            current_statement_begin__ = 19;
            num_params_r__ += 1;
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            validate_non_negative_index("r1_local", "(K - K1)", (K - K1));
            num_params_r__ += (K - K1);
            current_statement_begin__ = 22;
            validate_non_negative_index("r2_local", "(K - K1)", (K - K1));
            num_params_r__ += (K - K1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_linRegHorseShoe() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 15;
        if (!(context__.contains_r("beta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta0");
        pos__ = 0U;
        validate_non_negative_index("beta0", "K1", K1);
        context__.validate_dims("parameter initialization", "beta0", "vector_d", context__.to_vec(K1));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta0(K1);
        size_t beta0_j_1_max__ = K1;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            beta0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("beta2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta2");
        pos__ = 0U;
        validate_non_negative_index("beta2", "K2", K2);
        context__.validate_dims("parameter initialization", "beta2", "vector_d", context__.to_vec(K2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta2(K2);
        size_t beta2_j_1_max__ = K2;
        for (size_t j_1__ = 0; j_1__ < beta2_j_1_max__; ++j_1__) {
            beta2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("logsigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logsigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logsigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "logsigma", "double", context__.to_vec());
        double logsigma(0);
        logsigma = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, logsigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logsigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("zvalues")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zvalues missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zvalues");
        pos__ = 0U;
        validate_non_negative_index("zvalues", "(K - K1)", (K - K1));
        context__.validate_dims("parameter initialization", "zvalues", "vector_d", context__.to_vec((K - K1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zvalues((K - K1));
        size_t zvalues_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < zvalues_j_1_max__; ++j_1__) {
            zvalues(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zvalues);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zvalues: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("r1_global")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r1_global missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r1_global");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "r1_global", "double", context__.to_vec());
        double r1_global(0);
        r1_global = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, r1_global);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r1_global: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("r2_global")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r2_global missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r2_global");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "r2_global", "double", context__.to_vec());
        double r2_global(0);
        r2_global = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, r2_global);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r2_global: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("r1_local")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r1_local missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r1_local");
        pos__ = 0U;
        validate_non_negative_index("r1_local", "(K - K1)", (K - K1));
        context__.validate_dims("parameter initialization", "r1_local", "vector_d", context__.to_vec((K - K1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> r1_local((K - K1));
        size_t r1_local_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < r1_local_j_1_max__; ++j_1__) {
            r1_local(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, r1_local);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r1_local: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("r2_local")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r2_local missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r2_local");
        pos__ = 0U;
        validate_non_negative_index("r2_local", "(K - K1)", (K - K1));
        context__.validate_dims("parameter initialization", "r2_local", "vector_d", context__.to_vec((K - K1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> r2_local((K - K1));
        size_t r2_local_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < r2_local_j_1_max__; ++j_1__) {
            r2_local(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, r2_local);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r2_local: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta0;
            (void) beta0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta0 = in__.vector_constrain(K1, lp__);
            else
                beta0 = in__.vector_constrain(K1);
            current_statement_begin__ = 16;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta2;
            (void) beta2;  // dummy to suppress unused var warning
            if (jacobian__)
                beta2 = in__.vector_constrain(K2, lp__);
            else
                beta2 = in__.vector_constrain(K2);
            current_statement_begin__ = 17;
            local_scalar_t__ logsigma;
            (void) logsigma;  // dummy to suppress unused var warning
            if (jacobian__)
                logsigma = in__.scalar_ub_constrain(0, lp__);
            else
                logsigma = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zvalues;
            (void) zvalues;  // dummy to suppress unused var warning
            if (jacobian__)
                zvalues = in__.vector_constrain((K - K1), lp__);
            else
                zvalues = in__.vector_constrain((K - K1));
            current_statement_begin__ = 19;
            local_scalar_t__ r1_global;
            (void) r1_global;  // dummy to suppress unused var warning
            if (jacobian__)
                r1_global = in__.scalar_lb_constrain(0, lp__);
            else
                r1_global = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 20;
            local_scalar_t__ r2_global;
            (void) r2_global;  // dummy to suppress unused var warning
            if (jacobian__)
                r2_global = in__.scalar_lb_constrain(0, lp__);
            else
                r2_global = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 21;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r1_local;
            (void) r1_local;  // dummy to suppress unused var warning
            if (jacobian__)
                r1_local = in__.vector_lb_constrain(0, (K - K1), lp__);
            else
                r1_local = in__.vector_lb_constrain(0, (K - K1));
            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r2_local;
            (void) r2_local;  // dummy to suppress unused var warning
            if (jacobian__)
                r2_local = in__.vector_lb_constrain(0, (K - K1), lp__);
            else
                r2_local = in__.vector_lb_constrain(0, (K - K1));
            // transformed parameters
            current_statement_begin__ = 25;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("lambda", "(K - K1)", (K - K1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda((K - K1));
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "(K - K1)", (K - K1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta((K - K1));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("betaAll", "(K + K2)", (K + K2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betaAll((K + K2));
            stan::math::initialize(betaAll, DUMMY_VAR__);
            stan::math::fill(betaAll, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("sigma", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma(N);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 30;
            stan::math::assign(sigma, stan::math::sqrt(add(square((stan::math::exp(logsigma) * stan::math::sqrt(varY))), square(yUncertainty))));
            current_statement_begin__ = 31;
            stan::math::assign(lambda, elt_multiply(r1_local, stan::math::sqrt(r2_local)));
            current_statement_begin__ = 32;
            stan::math::assign(tau, ((r1_global * stan::math::sqrt(r2_global)) * stan::math::sqrt((square(stan::math::exp(logsigma)) + mean(square(yUncertainty))))));
            current_statement_begin__ = 33;
            stan::math::assign(beta, multiply(elt_multiply(zvalues, lambda), tau));
            current_statement_begin__ = 34;
            stan::math::assign(betaAll, append_row(append_row(beta0, beta), beta2));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 25;
            if (stan::math::is_uninitialized(tau)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: tau";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 26;
            size_t lambda_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "lambda", lambda, 0);
            current_statement_begin__ = 27;
            size_t beta_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 28;
            size_t betaAll_j_1_max__ = (K + K2);
            for (size_t j_1__ = 0; j_1__ < betaAll_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(betaAll(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: betaAll" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable betaAll: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 29;
            size_t sigma_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 37;
            lp_accum__.add(student_t_log<propto__>(logsigma, 3, -(1), 1.5));
            current_statement_begin__ = 39;
            lp_accum__.add(normal_log<propto__>(zvalues, 0, 1));
            current_statement_begin__ = 40;
            lp_accum__.add(normal_log<propto__>(r1_local, 0.0, 1.0));
            current_statement_begin__ = 41;
            lp_accum__.add(inv_gamma_log<propto__>(r2_local, 0.5, 0.5));
            current_statement_begin__ = 43;
            lp_accum__.add(normal_log<propto__>(r1_global, 0.0, 1));
            current_statement_begin__ = 44;
            lp_accum__.add(inv_gamma_log<propto__>(r2_global, 0.5, 0.5));
            current_statement_begin__ = 45;
            if (as_bool(logical_gt(K1, 0))) {
                current_statement_begin__ = 46;
                lp_accum__.add(student_t_log<propto__>(beta0, 1, 0, 5));
            }
            current_statement_begin__ = 48;
            if (as_bool(logical_gt(K2, 0))) {
                current_statement_begin__ = 49;
                lp_accum__.add(student_t_log<propto__>(beta2, 3, 0, 5));
            }
            current_statement_begin__ = 51;
            if (as_bool(logitR)) {
                current_statement_begin__ = 52;
                lp_accum__.add(bernoulli_logit_log<propto__>(yL, multiply(append_col(X, X2), betaAll)));
            } else {
                current_statement_begin__ = 54;
                lp_accum__.add(normal_log<propto__>(y, multiply(append_col(X, X2), betaAll), sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta0");
        names__.push_back("beta2");
        names__.push_back("logsigma");
        names__.push_back("zvalues");
        names__.push_back("r1_global");
        names__.push_back("r2_global");
        names__.push_back("r1_local");
        names__.push_back("r2_local");
        names__.push_back("tau");
        names__.push_back("lambda");
        names__.push_back("beta");
        names__.push_back("betaAll");
        names__.push_back("sigma");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - K1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - K1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - K1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - K1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - K1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K + K2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_linRegHorseShoe_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta0 = in__.vector_constrain(K1);
        size_t beta0_j_1_max__ = K1;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            vars__.push_back(beta0(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta2 = in__.vector_constrain(K2);
        size_t beta2_j_1_max__ = K2;
        for (size_t j_1__ = 0; j_1__ < beta2_j_1_max__; ++j_1__) {
            vars__.push_back(beta2(j_1__));
        }
        double logsigma = in__.scalar_ub_constrain(0);
        vars__.push_back(logsigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> zvalues = in__.vector_constrain((K - K1));
        size_t zvalues_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < zvalues_j_1_max__; ++j_1__) {
            vars__.push_back(zvalues(j_1__));
        }
        double r1_global = in__.scalar_lb_constrain(0);
        vars__.push_back(r1_global);
        double r2_global = in__.scalar_lb_constrain(0);
        vars__.push_back(r2_global);
        Eigen::Matrix<double, Eigen::Dynamic, 1> r1_local = in__.vector_lb_constrain(0, (K - K1));
        size_t r1_local_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < r1_local_j_1_max__; ++j_1__) {
            vars__.push_back(r1_local(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> r2_local = in__.vector_lb_constrain(0, (K - K1));
        size_t r2_local_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < r2_local_j_1_max__; ++j_1__) {
            vars__.push_back(r2_local(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 25;
            double tau;
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("lambda", "(K - K1)", (K - K1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda((K - K1));
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "(K - K1)", (K - K1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta((K - K1));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("betaAll", "(K + K2)", (K + K2));
            Eigen::Matrix<double, Eigen::Dynamic, 1> betaAll((K + K2));
            stan::math::initialize(betaAll, DUMMY_VAR__);
            stan::math::fill(betaAll, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("sigma", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(N);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 30;
            stan::math::assign(sigma, stan::math::sqrt(add(square((stan::math::exp(logsigma) * stan::math::sqrt(varY))), square(yUncertainty))));
            current_statement_begin__ = 31;
            stan::math::assign(lambda, elt_multiply(r1_local, stan::math::sqrt(r2_local)));
            current_statement_begin__ = 32;
            stan::math::assign(tau, ((r1_global * stan::math::sqrt(r2_global)) * stan::math::sqrt((square(stan::math::exp(logsigma)) + mean(square(yUncertainty))))));
            current_statement_begin__ = 33;
            stan::math::assign(beta, multiply(elt_multiply(zvalues, lambda), tau));
            current_statement_begin__ = 34;
            stan::math::assign(betaAll, append_row(append_row(beta0, beta), beta2));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 25;
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 26;
            check_greater_or_equal(function__, "lambda", lambda, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(tau);
                size_t lambda_j_1_max__ = (K - K1);
                for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda(j_1__));
                }
                size_t beta_j_1_max__ = (K - K1);
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t betaAll_j_1_max__ = (K + K2);
                for (size_t j_1__ = 0; j_1__ < betaAll_j_1_max__; ++j_1__) {
                    vars__.push_back(betaAll(j_1__));
                }
                size_t sigma_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 58;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 59;
            if (as_bool(logitR)) {
                current_statement_begin__ = 60;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 60;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                bernoulli_logit_log(get_base1(yL, n, "yL", 1), multiply(append_col(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), stan::model::rvalue(X2, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X2")), betaAll)), 
                                "assigning variable log_lik");
                }
            } else {
                current_statement_begin__ = 62;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 62;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_log(get_base1(y, n, "y", 1), multiply(append_col(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), stan::model::rvalue(X2, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X2")), betaAll), get_base1(sigma, n, "sigma", 1)), 
                                "assigning variable log_lik");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 58;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_linRegHorseShoe";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta0_j_1_max__ = K1;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta2_j_1_max__ = K2;
        for (size_t j_1__ = 0; j_1__ < beta2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "logsigma";
        param_names__.push_back(param_name_stream__.str());
        size_t zvalues_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < zvalues_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zvalues" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "r1_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r2_global";
        param_names__.push_back(param_name_stream__.str());
        size_t r1_local_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < r1_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r1_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t r2_local_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < r2_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r2_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau";
            param_names__.push_back(param_name_stream__.str());
            size_t lambda_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t betaAll_j_1_max__ = (K + K2);
            for (size_t j_1__ = 0; j_1__ < betaAll_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betaAll" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta0_j_1_max__ = K1;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta2_j_1_max__ = K2;
        for (size_t j_1__ = 0; j_1__ < beta2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "logsigma";
        param_names__.push_back(param_name_stream__.str());
        size_t zvalues_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < zvalues_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zvalues" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "r1_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r2_global";
        param_names__.push_back(param_name_stream__.str());
        size_t r1_local_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < r1_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r1_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t r2_local_j_1_max__ = (K - K1);
        for (size_t j_1__ = 0; j_1__ < r2_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r2_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau";
            param_names__.push_back(param_name_stream__.str());
            size_t lambda_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = (K - K1);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t betaAll_j_1_max__ = (K + K2);
            for (size_t j_1__ = 0; j_1__ < betaAll_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betaAll" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_linRegHorseShoe_namespace::model_linRegHorseShoe stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
